class Solution {
public:
    // Integer only needs to be divisible by largest integer in existing 
divisible subset
    vector<int> largestDivisibleSubset(vector<int>& nums) {
        int n = nums.size();
        if (n == 0) return {};

        // Sort for divisibility
        sort(nums.begin(), nums.end());

        vector<int> dp(n, 1);
        vector<int> prev(n, -1);
        int max_index = 0;

        // Loop n^2, compare all elements % other elements
        for (int i = 1; i < n; i++) {
            for (int j = 0; j < i; j++) {
                if (nums[i] % nums[j] == 0 && dp[i] < dp[j] + 1) {
                    // Set dp[i] to dp[j] value + 1
                    dp[i] = dp[j] + 1;
                    // Set prev[i] to j for reconstruction
                    prev[i] = j;
                }
            }
            if (dp[i] > dp[max_index]) {
                max_index = i;
            }
        }
        vector<int> result;
        while (max_index != -1) {
            result.push_back(nums[max_index]);
            max_index = prev[max_index];
        }
        return result;
    }
};
